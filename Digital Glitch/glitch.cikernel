//
// carbonGlitch.cikernel
// Altered Carbon
//
// Created by Nathan Taylor on 30 Jan 2018 12:28:37pm
// Copyright Â© 2018 Nathan Taylor. All rights reserved.

float rand(float n){
    return fract(sin(n) * 43758.5453123);
}

float rand(vec2 n) { 
	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(float p){
    float fl = floor(p);
    float fc = fract(p);
    return mix(rand(fl), rand(fl + 1.0), fc);
}
	
float noise(vec2 n) {
    vec2 d = vec2(0.0, 1.0);
    vec2 b = floor(n);
    vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));

    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
}

kernel vec4 apply(sampler src, float time, sampler chase, float factor, float shift) {
    vec2 p = destCoord() / samplerSize(src);

    vec4 cameraColor = sample(src, samplerCoord(src));
    vec4 chaseColor = sample(chase, samplerCoord(chase));
    // vec4 cameraColorShifted = sample(src, samplerCoord(src) + vec2(0.01, 0.0));
    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);

    //vec3 recolor = vec3(0.7, 1.0, 0.85);
    // vec3 recolor = vec3(1.0, 0.75, 0.75);

    // chaseColor.rgb *= recolor;
    
    // vec3 cameraRecolor = cameraColor.rgb * recolor;

    // cameraColor.r = cameraColorShifted.r;

    // cameraColor.rgb = mix(cameraColor.rgb, cameraRecolor.rgb, tint / 5.0);
    
    // cameraColor.rgb = mix(cameraColor.rgb, black.rgb, blackout);

    float timeSlice1 = floor(time * 20.0);
    float timeSlice2 = floor(time * 5.0);
    float timeSlice3 = floor(time * 7.0);

    vec2 pMod1 = vec2(
        floor(p.x * 8.0),
        floor(p.y * 8.0)
    );
    vec2 pMod2 = vec2(
        floor(p.x * 1.3),
        floor(p.y * 4.0)
    );
    // vec2 pMod3 = vec2(
    //     floor(p.x * 7.0),
    //     floor(p.y * 35.0)
    // );

    float n1 = noise(
        floor(pMod1 + vec2(timeSlice1) * 100.0)
    );
    float n2 = noise(
        floor(pMod2 + vec2(timeSlice2) * 100.0)
    );
    // float n3 = noise(
    //     floor(pMod3 + vec2(timeSlice3) * 100.0)
    // );

    float factorValue = 1.0 - factor * 1.0;
    float factorDivisor = (1.0 / (1.0 - factorValue)) * 0.7;

    float nn = max(0.0, n1 - factorValue) * factorDivisor
        + max(0.0, n2 - factorValue) * factorDivisor
        + max(0.0, n1 - factorValue) * factorDivisor;

    nn = clamp(nn, 0.0, 1.0);


    return mix(cameraColor, chaseColor, nn);//.rrra * (mod(floor(p.y * 400.0), 2.0)); 

    // return vec4(nn, nn, nn, 1.0);
}